# -*- coding: utf-8 -*-

from transformers import pipeline
import torch # Часто используется как бэкенд, проверяем наличие GPU

# --- Конфигурация ---
# Название модели для Zero-shot классификации
# Это многоязычная модель, обученная на NLI и XNLI (для кросс-языковых задач)
model_name = "MoritzLaurer/mDeBERTa-v3-base-mnli-xnli"

# Произвольный текст для классификации (придумайте свой или используйте этот)
# Пример текста о научном открытии
sample_text = "Гравитационные волны были впервые предсказаны Альбертом Эйнштейном в 1916 году в рамках его общей теории относительности. Однако прямое экспериментальное обнаружение произошло только спустя почти столетие, в 2015 году, с помощью детектора LIGO. Это открытие открыло новую эру в астрономии, позволив изучать Вселенную с помощью гравитационно-волновой астрономии."

# Список категорий, по которым мы хотим классифицировать текст
# Задайте свои категории на русском языке
candidate_labels = ['Наука', 'Технология', 'История', 'Биография', 'Искусство', 'Спорт', 'Событие']
# --- Конец Конфигурации ---

print(f"Загрузка Zero-shot классификационного пайплайна с моделью '{model_name}'...")

# Определяем устройство для выполнения: GPU (cuda:0) если доступен, иначе CPU (-1)
device = 0 if torch.cuda.is_available() else -1
print(f"Используется устройство: {'GPU' if device == 0 else 'CPU'}")

try:
    # Создаем пайплайн для zero-shot классификации
    classifier = pipeline(
        "zero-shot-classification",
        model=model_name,
        tokenizer=model_name, # Токенизатор часто соответствует модели
        device=device # Указываем устройство
    )

    print("Пайплайн загружен.")
    print("\n--- Выполняем классификацию ---")
    print(f"Текст: '{sample_text}'")
    print(f"Кандидатные категории: {candidate_labels}")

    # Выполняем классификацию
    # multi_label=False означает, что выбирается только одна наиболее вероятная категория
    # multi_label=True позволит получить вероятности для всех категорий независимо друг от друга
    results = classifier(sample_text, candidate_labels, multi_label=False)

    print("\n--- Результаты классификации ---")
    # Результаты содержат исходный текст, список меток и соответствующие им вероятности
    print(results)

    print("\nНаиболее вероятная категория:")
    # Результаты отсортированы по убыванию вероятности, первая метка - самая вероятная
    top_label = results['labels'][0]
    top_score = results['scores'][0]
    print(f"Категория: '{top_label}' (Вероятность: {top_score:.4f})")


except Exception as e:
    print(f"\nПроизошла ошибка во время выполнения скрипта: {e}")
    import traceback
    traceback.print_exc()


print("\nСкрипт завершен.")